from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '7652002226:AAHGsWpYqkM5yInsOrAAmPb4YS3CrgDg2b4'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
LANDING_URL = 'https://v0-build-something-zeta.vercel.app'  # –í–∞—à URL –ª–µ–Ω–¥–∏–Ω–≥–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"
portfolio_keyboard = types.InlineKeyboardMarkup()
portfolio_keyboard.add(types.InlineKeyboardButton(
    text="üìÅ –û—Ç–∫—Ä—ã—Ç—å –º–æ—ë –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
    web_app=types.WebAppInfo(url=LANDING_URL)
))

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ø–Ω—ã –°–∏–¥–∏–∫–æ–≤–æ–π. –ë—ã–ª —Å–¥–µ–ª–∞–Ω –∑–∞ 15 –º–∏–Ω—É—Ç :)\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç üëá",
        reply_markup=portfolio_keyboard
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
